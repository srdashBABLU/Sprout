package com.xash.sprout.app.ui.dilaogues.colorful

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog

@Composable
fun InformationVulnerabilityDialog(
    informationType: String = "personal information",
    onProceedAnyway: (() -> Unit)? = null,
    onCancel: () -> Unit
) {
    Dialog(onDismissRequest = onCancel) {
        Card(
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(
                containerColor = Color.White
            ),
            elevation = CardDefaults.cardElevation(
                defaultElevation = 6.dp
            )
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 32.dp, horizontal = 24.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                // Privacy Warning Icon
                PrivacyWarningIcon()

                Spacer(modifier = Modifier.height(24.dp))

                // "Privacy Warning" text
                Text(
                    text = "Privacy Warning",
                    fontSize = 28.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFE65100),
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.height(12.dp))

                // Warning message
                Text(
                    text = "You're about to share $informationType. This could expose you to various risks.",
                    fontSize = 16.sp,
                    color = Color.Gray,
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Risk indicators cards
                Column(
                    modifier = Modifier.fillMaxWidth(),
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    RiskCard(
                        icon = "üéØ",
                        risk = "Identity Theft",
                        description = "Personal info can be used for fraudulent activities"
                    )

                    RiskCard(
                        icon = "üí∞",
                        risk = "Financial Fraud",
                        description = "Scammers may use your data for monetary gain"
                    )

                    RiskCard(
                        icon = "üìç",
                        risk = "Location Tracking",
                        description = "Your whereabouts could be monitored"
                    )
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Safety tips card
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFFF3E5F5)
                    ),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "üí°",
                                fontSize = 20.sp
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = "Safety Tips",
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFF6A1B9A)
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        Text(
                            text = "‚Ä¢ Only share with trusted contacts\n‚Ä¢ Avoid sharing in public conversations\n‚Ä¢ Be cautious with strangers\n‚Ä¢ Remove metadata from photos",
                            fontSize = 14.sp,
                            color = Color(0xFF6A1B9A),
                            lineHeight = 20.sp
                        )
                    }
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Buttons
                if (onProceedAnyway != null) {
                    Button(
                        onClick = onProceedAnyway,
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        shape = RoundedCornerShape(16.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFFFF9800)
                        )
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.Center
                        ) {
                            Text(
                                text = "‚ö†Ô∏è",
                                fontSize = 18.sp
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = "Proceed Anyway",
                                fontSize = 18.sp,
                                color = Color.White
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(12.dp))
                }

                // Cancel/Keep Private button
                Button(
                    onClick = onCancel,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp),
                    shape = RoundedCornerShape(16.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF00D9A6)
                    )
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.Center
                    ) {
                        Text(
                            text = "üîí",
                            fontSize = 18.sp
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "Keep Private",
                            fontSize = 18.sp,
                            color = Color.White
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun RiskCard(
    icon: String,
    risk: String,
    description: String
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFFFF3E0)
        ),
        shape = RoundedCornerShape(8.dp)
    ) {
        Row(
            modifier = Modifier.padding(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = icon,
                fontSize = 20.sp
            )
            Spacer(modifier = Modifier.width(12.dp))
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = risk,
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFE65100)
                )
                Text(
                    text = description,
                    fontSize = 12.sp,
                    color = Color(0xFFE65100)
                )
            }
        }
    }
}

@Composable
fun PrivacyWarningIcon() {
    Box(
        modifier = Modifier
            .size(100.dp)
            .background(
                color = Color(0x15E65100),
                shape = CircleShape
            ),
        contentAlignment = Alignment.Center
    ) {
        // Privacy shield with warning
        Box(
            modifier = Modifier
                .size(80.dp)
                .clip(CircleShape)
                .background(Color(0xFFE65100)),
            contentAlignment = Alignment.Center
        ) {
            // Privacy/Shield symbol
            Text(
                text = "üõ°Ô∏è",
                fontSize = 36.sp,
                color = Color.White
            )
        }

        // Warning overlay
        Box(
            modifier = Modifier
                .size(28.dp)
                .background(Color(0xFFFF5722), CircleShape)
                .align(Alignment.TopEnd)
        ) {
            Text(
                text = "‚ö†Ô∏è",
                fontSize = 16.sp,
                modifier = Modifier.align(Alignment.Center)
            )
        }

        // Privacy symbols
        Text(
            text = "üîí",
            fontSize = 16.sp,
            modifier = Modifier.align(Alignment.TopStart)
        )

        Text(
            text = "üëÅÔ∏è",
            fontSize = 16.sp,
            modifier = Modifier.align(Alignment.BottomStart)
        )

        Text(
            text = "üì±",
            fontSize = 16.sp,
            modifier = Modifier.align(Alignment.BottomEnd)
        )
    }
}

// Specific dialog for photo sharing
@Composable
fun PhotoSharingVulnerabilityDialog(
    onProceedAnyway: (() -> Unit)? = null,
    onCancel: () -> Unit
) {
    Dialog(onDismissRequest = onCancel) {
        Card(
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(
                containerColor = Color.White
            ),
            elevation = CardDefaults.cardElevation(
                defaultElevation = 6.dp
            )
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 32.dp, horizontal = 24.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                // Photo Privacy Icon
                PhotoPrivacyIcon()

                Spacer(modifier = Modifier.height(24.dp))

                // "Photo Privacy Alert" text
                Text(
                    text = "Photo Privacy Alert",
                    fontSize = 28.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFE65100),
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.height(12.dp))

                // Warning message
                Text(
                    text = "Photos can contain hidden information that reveals more than you think.",
                    fontSize = 16.sp,
                    color = Color.Gray,
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Photo risks
                Column(
                    modifier = Modifier.fillMaxWidth(),
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    RiskCard(
                        icon = "üìç",
                        risk = "Location Data",
                        description = "GPS coordinates embedded in photo metadata"
                    )

                    RiskCard(
                        icon = "üïê",
                        risk = "Timestamp Info",
                        description = "Exact time and date when photo was taken"
                    )

                    RiskCard(
                        icon = "üì±",
                        risk = "Device Details",
                        description = "Camera model and device information"
                    )

                    RiskCard(
                        icon = "üè†",
                        risk = "Background Clues",
                        description = "Identifiable locations, addresses, or personal items"
                    )
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Metadata warning
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFFFFEBEE)
                    ),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "üîç",
                                fontSize = 20.sp
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = "Hidden Data Alert",
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFFD32F2F)
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        Text(
                            text = "Even if you can't see it, your photos may contain metadata that reveals your location, device, and other sensitive information to anyone who receives them.",
                            fontSize = 14.sp,
                            color = Color(0xFFD32F2F),
                            lineHeight = 20.sp
                        )
                    }
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Buttons
                if (onProceedAnyway != null) {
                    Button(
                        onClick = onProceedAnyway,
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        shape = RoundedCornerShape(16.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFFFF9800)
                        )
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.Center
                        ) {
                            Text(
                                text = "üì∑",
                                fontSize = 18.sp
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = "Share Anyway",
                                fontSize = 18.sp,
                                color = Color.White
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(12.dp))
                }

                // Don't Share button
                Button(
                    onClick = onCancel,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp),
                    shape = RoundedCornerShape(16.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF00D9A6)
                    )
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.Center
                    ) {
                        Text(
                            text = "üîí",
                            fontSize = 18.sp
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "Don't Share",
                            fontSize = 18.sp,
                            color = Color.White
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun PhotoPrivacyIcon() {
    Box(
        modifier = Modifier
            .size(100.dp)
            .background(
                color = Color(0x15E65100),
                shape = CircleShape
            ),
        contentAlignment = Alignment.Center
    ) {
        // Photo with privacy overlay
        Box(
            modifier = Modifier
                .size(80.dp)
                .clip(CircleShape)
                .background(Color(0xFFE65100)),
            contentAlignment = Alignment.Center
        ) {
            // Photo symbol
            Text(
                text = "üì∑",
                fontSize = 36.sp,
                color = Color.White
            )
        }

        // Metadata warning
        Box(
            modifier = Modifier
                .size(24.dp)
                .background(Color(0xFFFF5722), CircleShape)
                .align(Alignment.TopEnd)
        ) {
            Text(
                text = "i",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White,
                modifier = Modifier.align(Alignment.Center)
            )
        }

        // Privacy symbols
        Text(
            text = "üìç",
            fontSize = 16.sp,
            modifier = Modifier.align(Alignment.TopStart)
        )

        Text(
            text = "üîç",
            fontSize = 16.sp,
            modifier = Modifier.align(Alignment.BottomStart)
        )

        Text(
            text = "‚ö†Ô∏è",
            fontSize = 16.sp,
            modifier = Modifier.align(Alignment.BottomEnd)
        )
    }
}

@Preview(showBackground = true)
@Composable
fun InformationVulnerabilityDialogPreview() {
    MaterialTheme {
        Surface(color = Color.White) {
            InformationVulnerabilityDialog(
                informationType = "your home address",
                onProceedAnyway = {},
                onCancel = {}
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PhotoSharingVulnerabilityDialogPreview() {
    MaterialTheme {
        Surface(color = Color.White) {
            PhotoSharingVulnerabilityDialog(
                onProceedAnyway = {},
                onCancel = {}
            )
        }
    }
}